---
title: "04. Describing expression data"
execute: 
  echo: false
  eval: true
format: html
editor: 
  markdown: 
    wrap: 80
---

# =============================> KT code START <================================

## Loading libraries

```{r}
#| eval: false
library(tidyverse)
```
```{r}
#| eval: true
library(dplyr)
library(patchwork)
library(ggridges)
```

## Loading and cleaning data // FIX: REUSING CODE FROM 02

```{r}
expression_data <- read_csv("../data/01_expression_data.csv")
patient_data    <- read_csv("../data/01_patient_data.csv")

# removing gene "call" columns
expression_data <- expression_data |>
  select(-matches("^call\\.\\.\\.\\d+")
         )

# cleaning column names
expression_data <- expression_data |>
  rename(gene_description = "Gene Description",
         gene_accession_number = "Gene Accession Number"
         )
```

## Transforming data

```{r}
# pivoting to put patient ID, gene, cancer, expression in columns
expression_long <- expression_data |> 
  pivot_longer(cols = -c(gene_description,
                         gene_accession_number),
               names_to  = "patient_id",
               values_to = "expression")
```

```{r}
# merging expression data with patient data based on patient ID
expression_long_with_cancer <- merge(x = expression_long,
                                     y = patient_data,
                                     by.x = "patient_id",
                                     by.y = "patient")
```

## Finding highest and lowest expressed genes // ACCEPTABLE

```{r}
# FUNCTION
find_most_expressed <- function(data,
                                n,
                                reverse = FALSE) {
  # 'highest' expression based on mean per gene
  data_means <- data |> 
    group_by(gene_accession_number) |> 
    summarise(mean = mean(expression))
  
  # reversing sorting order for 'lowest' expression
  if (reverse == TRUE) {
    data_means <- data_means |>
      arrange(mean,
              .by_group = TRUE)
  } else {
    data_means <- data_means |> 
      arrange(desc(mean),
              .by_group = TRUE)
  }
  
  # selecting n from the top
  gene_list <- data_means |> 
    slice(1:n) |> 
    select(gene_accession_number) |>
    # later selection with %in% requires a vector
    pull()
  
  data |> 
    filter(gene_accession_number %in% gene_list) |> 
    group_by(gene_description)
}

# Find HIGHEST 10
highest_10_genes_ALL <- expression_long_with_cancer |> 
  filter(cancer == "ALL") |> 
  find_most_expressed(n = 10)

highest_10_genes_AML <- expression_long_with_cancer |>
  filter(cancer == "AML") |> 
  find_most_expressed(n = 10)

# Find LOWEST 10
lowest_10_genes_ALL <- expression_long_with_cancer |> 
  find_most_expressed(n = 10,
                      reverse = TRUE)

lowest_10_genes_AML <- expression_long_with_cancer |> 
  filter(cancer == "AML") |> 
  find_most_expressed(n = 10,
                      reverse = TRUE)
```

## Plotting distributions of 10 highest expressed genes // ACCEPTABLE

```{r}
#| label: highest-ridges
#| fig-width: 7
#| fig-asp: 0.5
#| out-width: "600"

highest_10_combined <- bind_rows(highest_10_genes_ALL,
                                 highest_10_genes_AML)

highest_10_plot <- highest_10_combined |> 
  ggplot(
    aes(x = expression,
        y = gene_description,
        fill = cancer)
  ) +
  geom_density_ridges(
    alpha = 0.5,
    scale = 1,
    panel_scaling = FALSE
  ) +
  scale_fill_viridis_d(name = "Cancer type") +
  labs(
    title = "Highest mean expression per cancer type.",
    x = "Gene expression (a.u.)",
    y = NULL
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 12,
                              face = "bold"),
    plot.title.position = "plot",
    plot.subtitle = element_text(size = 10),
    axis.text.y = element_text(size = 10,
                               color = "black"),
    axis.title.x = element_text(size = 11,
                                face = "bold"),
    axis.text.x = element_text(size = 11),
    legend.title = element_text(size = 11,
                                face = "bold"),
    legend.text = element_text(size = 11),
    legend.position = "top",
    legend.justification = c(0, 0)
  )

highest_10_plot
```

## Plotting distribution of 10 lowest expressed genes

```{r}
#| label: lowest-plots
#| fig-width: 7
#| fig-asp: 0.5
#| out-width: "600"

lowest_10_combined <- bind_rows(lowest_10_genes_ALL,
                                lowest_10_genes_AML)

lowest_10_plot <- lowest_10_combined |> 
  ggplot(
    aes(x = expression,
        y = gene_description,
        fill = cancer)
  ) +
  geom_density_ridges(
    alpha = 0.5,
    scale = 1,
    panel_scaling = FALSE
  ) +
  scale_fill_viridis_d(name = "Cancer type") +
  labs(
    title = "Lowest mean expression per cancer type.",
    x = "Gene expression (a.u.)",
    y = NULL
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 12,
                              face = "bold"),
    plot.title.position = "plot",
    plot.subtitle = element_text(size = 10),
    axis.text.y = element_text(size = 10,
                               color = "black"),
    axis.title.x = element_text(size = 11,
                                face = "bold"),
    axis.text.x = element_text(size = 11),
    legend.title = element_text(size = 11,
                                face = "bold"),
    legend.text = element_text(size = 11),
    legend.position = "top",
    legend.justification = c(0, 0)
  )

lowest_10_plot
```

## Combining plots with `patchwork` // ILLEGIBLE

```{r}
#| label: combined-ridges
#| fig-width: 7
#| fig-asp: 1.0
#| out-width: "1200"

highest_10_plot / lowest_10_plot
```

## Combining data to make one plot

```{r}
highest_10_combined_marked <- highest_10_combined |> 
  mutate(extremum = "highest")

lowest_10_combined_marked <- lowest_10_combined |> 
  mutate(extremum = "lowest")

highest_and_lowest <- bind_rows(highest_10_combined_marked,
                                lowest_10_combined_marked)
```

## Combining plots with facets // ILLEGIBLE

```{r}
#| label: combined-ridges
#| fig-width: 7
#| fig-asp: 1.0
#| out-width: "1200"

highest_and_lowest_plot <- highest_and_lowest |> 
  ggplot(
    aes(x = expression,
        y = gene_description,
        fill = cancer)
  ) +
  geom_density_ridges(
    alpha = 0.5,
    scale = 1,
    panel_scaling = FALSE
  ) +
  facet_wrap(~extremum,
             nrow = 2,
             scales = "free",
             shrink = TRUE) +
  scale_fill_viridis_d(name = "Cancer type") +
  labs(
    tag = "",
    title = "Exploring high and low end of gene expression",
    x = "Gene expression (a.u.)",
    y = NULL
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 11,
                              face = "bold"),
    plot.title.position = "plot",
    axis.text.y = element_text(size = 8,
                               color = "black"),
    axis.title.x = element_text(size = 10,
                                face = "bold"),
    axis.text.x = element_text(size = 10),
    legend.title = element_text(size = 9,
                                face = "bold"),
    legend.text = element_text(size = 9),
    legend.position = "top",
    legend.justification = c(0, 0)
  )

highest_and_lowest_plot
```

# ==============================> KT code END <=================================

## Loading data

```{r}
expression_scaled <- read_csv("../data/03_expression_scaled.csv")
expression_tidy <- read_csv("../data/03_expression_tidy.csv")

expression_tidy |> 
  sample_n(5) |> 
  view()

expression_means <- expression_tidy |>
  group_by(cancer) |>
  summarize(across(c(-patient_id, -cancer_type_number),
                   list(mean = mean),
                   na.rm = TRUE
                   )
            )
```

```{r}
# pivoting to put each gene in its own row
expression_means_long <- expression_means |> 
  pivot_longer(cols = -cancer,
               names_to = "gene_accession_number",
               values_to = "mean")

expression_means_long
```

```{r}
# finding top 10 highly expressed genes in ALL patients
top_10_genes_ALL <- expression_means_long |> 
  filter(cancer == "ALL") |> 
  arrange(desc(mean)) |> 
  slice_head(n = 10) |> 
  select(-mean) |> 
  mutate(rank = c(1:10),
         .before = cancer)

top_10_genes_ALL
```

```{r}
# finding top 10 highly expressed genes in AML patients
top_10_genes_AML <- expression_means_long |> 
  filter(cancer == "AML") |> 
  arrange(desc(mean)) |> 
  slice_head(n = 10) |> 
  select(-mean) |> 
  mutate(rank = c(1:10),
         .before = cancer)

top_10_genes_AML
```

```{r}
# combining top 10s into one tibble
top_10_genes_per_cancer <- bind_rows(top_10_genes_ALL,
                                     top_10_genes_AML)
top_10_genes_per_cancer
```

## Top 10 highly expressed genes

### ALL

```{r}
top_all_means_long <- expression_means |>
  pivot_longer(cols = -cancer,
               names_to = "gene",
               values_to = "expression_mean") |>
  mutate(gene = str_sub(gene,
                        start = 1,
                        end = -6)) |>
  filter(cancer == 'ALL') |>
  arrange(desc(expression_mean)) |>
  slice(1:10)

significant_ALL <- expression_tidy |>
  filter(cancer == 'ALL') |>
  select(top_all_means_long$gene)

significant_ALL_long <- significant_ALL |>
  mutate(id = row_number()) |>
  pivot_longer(col = -"id",
               names_to = "gene",
               values_to = "expression")

ggplot(data = significant_ALL_long, aes(x = gene, y = expression)) + 
  geom_violin(fill = "lightgreen", color = "green") +
  theme_bw() +  
  theme(legend.key = element_blank()) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.title = element_blank()) +
  labs(title = "Most significt genes of ALL group", x = "Gene name", y = "Relative expression")
```

### AML

```{r}
top_aml_means_long <- expression_means |>
  pivot_longer(cols = -cancer,
               names_to = "gene",
               values_to = "expression_mean") |>
  mutate(gene = str_sub(gene, start = 1, end = -6)) |>
  filter(cancer == 'AML') |>
  arrange(desc(expression_mean)) |>
  slice(1:10)

significant_AML <- expression_tidy |>
  filter(cancer == 'AML') |>
  select(top_aml_means_long$gene)

significant_AML_long <- significant_AML |>
  mutate(id = row_number()) |>
  pivot_longer(col = -"id",
               names_to = "gene",
               values_to = "expression")

ggplot(data = significant_AML_long, aes(x = gene, y = expression)) + 
  geom_violin(fill = "lightblue", color = "blue") +
  theme_bw() +  
  theme(legend.key = element_blank()) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.title = element_blank()) +
  labs(title = "Most significt genes of AML group", x = "Gene name", y = "Relative expression")
```