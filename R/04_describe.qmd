---
title: "04. Describing expression data"
execute: 
  echo: false
  eval: true
format: html
editor: 
  markdown: 
    wrap: 80
---

# =============================> KT code START <================================

## Loading libraries

```{r}
#| eval: false
library(tidyverse)
```
```{r}
#| eval: true
library(dplyr)
```

## Loading and cleaning data // FIX: REUSING CODE FROM 02

```{r}
expression_data <- read_csv("../data/01_expression_data.csv")
patient_data    <- read_csv("../data/01_patient_data.csv")

# removing gene "call" columns
expression_data <- expression_data |>
  select(-matches("^call\\.\\.\\.\\d+")
         )

# cleaning column names
expression_data <- expression_data |>
  rename(gene_description = "Gene Description",
         gene_accession_number = "Gene Accession Number"
         )

#expression_data_5 <- expression_data |> 
#  sample_n(5) |> 
#  view()
```

## Transforming data

```{r}
# pivoting to put patient ID, gene, cancer, expression in columns
expression_long <- expression_data |> 
  pivot_longer(cols = -c(gene_description,
                         gene_accession_number),
               names_to  = "patient_id",
               values_to = "expression")
```

```{r}
# merging expression data with patient data based on patient ID
expression_long_with_cancer <- merge(x = expression_long,
                                     y = patient_data,
                                     by.x = "patient_id",
                                     by.y = "patient")
```

```{r}
# trying to make a tibble that contains all expression values of 10 genes with
# highest mean expression for each cancer
top_genes_list <- expression_long_with_cancer |> 
  group_by(cancer,
           gene_accession_number) |> 
  summarise(mean = mean(expression)) |> 
  arrange(desc(mean),
          .by_group = TRUE) |> 
  slice(1:10) |> 
  select(gene_accession_number) |> 
  ungroup() |> 
  distinct(gene_accession_number) |> 
  pull()

#view(top_genes_list)
```

```{r}
# selecting expression values based on top 10 genes from above
top_genes_per_cancer_values <- expression_long_with_cancer |> 
  filter(gene_accession_number %in% top_genes_list) |> 
  group_by(cancer, gene_accession_number)

#view(top_genes_per_cancer_values)
```

```{r}
# trying to plot distributions
top_genes_plot <- top_genes_per_cancer_values |> 
  ggplot(
    mapping = aes(x = gene_accession_number,
                  y = expression,
                  colour = cancer)
    ) +
  geom_violin()

top_genes_plot
```
# ==============================> KT code END <=================================

## Loading data

```{r}
expression_scaled <- read_csv("../data/03_expression_scaled.csv")
expression_tidy <- read_csv("../data/03_expression_tidy.csv")

expression_tidy |> 
  sample_n(5) |> 
  view()

expression_means <- expression_tidy |>
  group_by(cancer) |>
  summarize(across(c(-patient_id, -cancer_type_number),
                   list(mean = mean),
                   na.rm = TRUE
                   )
            )
```

```{r}
# pivoting to put each gene in its own row
expression_means_long <- expression_means |> 
  pivot_longer(cols = -cancer,
               names_to = "gene_accession_number",
               values_to = "mean")

expression_means_long
```

```{r}
# finding top 10 highly expressed genes in ALL patients
top_10_genes_ALL <- expression_means_long |> 
  filter(cancer == "ALL") |> 
  arrange(desc(mean)) |> 
  slice_head(n = 10) |> 
  select(-mean) |> 
  mutate(rank = c(1:10),
         .before = cancer)

top_10_genes_ALL
```

```{r}
# finding top 10 highly expressed genes in AML patients
top_10_genes_AML <- expression_means_long |> 
  filter(cancer == "AML") |> 
  arrange(desc(mean)) |> 
  slice_head(n = 10) |> 
  select(-mean) |> 
  mutate(rank = c(1:10),
         .before = cancer)

top_10_genes_AML
```

```{r}
# combining top 10s into one tibble
top_10_genes_per_cancer <- bind_rows(top_10_genes_ALL,
                                     top_10_genes_AML)
top_10_genes_per_cancer
```

## Top 10 highly expressed genes

### ALL

```{r}
top_all_means_long <- expression_means |>
  pivot_longer(cols = -cancer,
               names_to = "gene",
               values_to = "expression_mean") |>
  mutate(gene = str_sub(gene,
                        start = 1,
                        end = -6)) |>
  filter(cancer == 'ALL') |>
  arrange(desc(expression_mean)) |>
  slice(1:10)

significant_ALL <- expression_tidy |>
  filter(cancer == 'ALL') |>
  select(top_all_means_long$gene)

significant_ALL_long <- significant_ALL |>
  mutate(id = row_number()) |>
  pivot_longer(col = -"id",
               names_to = "gene",
               values_to = "expression")

ggplot(data = significant_ALL_long, aes(x = gene, y = expression)) + 
  geom_violin(fill = "lightgreen", color = "green") +
  theme_bw() +  
  theme(legend.key = element_blank()) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.title = element_blank()) +
  labs(title = "Most significt genes of ALL group", x = "Gene name", y = "Relative expression")
```

### AML

```{r}
top_aml_means_long <- expression_means |>
  pivot_longer(cols = -cancer,
               names_to = "gene",
               values_to = "expression_mean") |>
  mutate(gene = str_sub(gene, start = 1, end = -6)) |>
  filter(cancer == 'AML') |>
  arrange(desc(expression_mean)) |>
  slice(1:10)

significant_AML <- expression_tidy |>
  filter(cancer == 'AML') |>
  select(top_aml_means_long$gene)

significant_AML_long <- significant_AML |>
  mutate(id = row_number()) |>
  pivot_longer(col = -"id",
               names_to = "gene",
               values_to = "expression")

ggplot(data = significant_AML_long, aes(x = gene, y = expression)) + 
  geom_violin(fill = "lightblue", color = "blue") +
  theme_bw() +  
  theme(legend.key = element_blank()) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(legend.title = element_blank()) +
  labs(title = "Most significt genes of AML group", x = "Gene name", y = "Relative expression")
```