```{r}
library(tidyverse)
```

```{r}
# heatmap function
# takes the estimates dataframe and scaled tidy dataframe
# 'top' argument determines whether slice_min or slice_max is used
# to take 25 most differently expressed genes between the two cancer types in favor of one of the types
heatmap_from_data <- function(estimates_df, tidy_data_df, top = TRUE) {
  if (isTRUE(top)) {
    sig_list <- estimates_df |>
      filter(is_significant == "yes") |>
      slice_max(estimate, n = 25) |>
      select(gene) |>
      pull() |>
      as.character()
  } else {
    sig_list <- estimates_df |>
      filter(is_significant == "yes") |>
      slice_min(estimate, n = 25) |>
      select(gene) |>
      pull() |>
      as.character()
  }
  
  
  cancer_data_rescaled_sig <- tidy_data_df |> 
    select(patient_id, cancer, all_of(sig_list)) |>
    arrange(cancer)
  cancer_data_rescaled_sig$patient_id <- factor(cancer_data_rescaled_sig$patient_id, 
                                          levels = cancer_data_rescaled_sig$patient_id)
    
    
  heatmap <- cancer_data_rescaled_sig |>
    pivot_longer(cols = -c(patient_id, cancer), names_to = "gene", values_to = "expr") |>
    ggplot(aes(x = gene, y = patient_id)) +
    geom_tile(aes(fill=expr)) +
    scale_fill_viridis_c() +
    theme(axis.text.x = element_text(angle=45, hjust = 1, size = 5),
          axis.text.y = element_blank(),
          axis.ticks.y = element_blank(),
          legend.position = "bottom") +
    facet_grid(vars(cancer), space = "free_y", scales = "free_y")
  
  return(heatmap)
}
```

