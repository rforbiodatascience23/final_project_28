```{r}
library(tidyverse)
```


```{r}
#load the data
id_and_cancer_type <- read_csv("../_raw/actual.csv")
raw_data <- read_csv("../_raw/data_set_ALL_AML_independent.csv")
raw_data_2 <- read_csv("../_raw/data_set_ALL_AML_train.csv")

#merge the two data frames (we will not be doing model training)
raw_data_merged <- merge(x = raw_data, y = raw_data_2, by.x = c("Gene Description", "Gene Accession Number"),  by.y = c("Gene Description", "Gene Accession Number"))

#remove objects to free memory
remove(raw_data, raw_data_2)
```


```{r}
#load the second half
raw_data_merged <- raw_data_merged |>
  select(-matches("^call\\.\\.\\.\\d+"))

#edit column names
raw_data_merged <- raw_data_merged |>
  select(!`Gene Description`) |>
  rename("Gene_Accession_Number" = `Gene Accession Number`)

#pivot data 
transformed_data <- raw_data_merged |>
  pivot_longer(cols = -Gene_Accession_Number, names_to = "ID", values_to = "expression") |> 
  pivot_wider( names_from = Gene_Accession_Number, values_from = expression)

#remove unnecessary objects to free memory
remove(raw_data_merged)

#add numeric values for the cancer types 
id_and_cancer_type <- id_and_cancer_type |>
  mutate(
    cancer_type_number = case_when(
      cancer == "ALL" ~ 0,
      cancer == "AML" ~ 1
    )
  ) 

#merge the large dataframe with the small based on ID
transformed_data_with_cancer <- merge(x = transformed_data, y = id_and_cancer_type, by.x = "ID", by.y = "patient")


#re-sort the dataframe and shift around some columns
transformed_data_with_cancer <- transformed_data_with_cancer |>
  select(ID, cancer, cancer_type_number, everything()) |>
  mutate(ID = sapply(ID, as.numeric)) |>
  arrange(ID)

#free memory by removing unnecessary objects
remove(transformed_data, id_and_cancer_type)

#write to csv
write.csv(transformed_data_with_cancer, "../data/tidied_data.csv", row.names = FALSE)

#free memory
remove(ordered_raw_data_with_cancer)

#test_read <- read_csv("../data/tidied_data.csv")
#remove(test_read)
```

